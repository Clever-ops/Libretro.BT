RARCH_VERSION		= "0.9.6-beta1"

#which compiler to build  with - GCC or SNC
#set to GCC for debug builds for use with debugger
CELL_BUILD_TOOLS	= SNC
CELL_GPU_TYPE	   	= RSX
CELL_PSGL_VERSION	= ultra-opt

DEBUG			= 0
DOWNLOAD_SHADERS	= 1
STRIPPING_ENABLE	= 0
HAVE_RARCH_GL		= 0
HAVE_LOGGER		= 0

CONTENT_ID_FULL		= UP0001-SSNE10000_00-0000000000000001
CONTENT_ID		= SSNE10000

PC_DEVELOPMENT_IP_ADDRESS	= "192.168.1.7"
PC_DEVELOPMENT_UDP_PORT		= 3490

CELL_MK_DIR		?= $(CELL_SDK)/samples/mk
include $(CELL_MK_DIR)/sdk.makedef.mk

PPU_TARGET		= retroarch.elf
SALAMANDER_TARGET	= retroarch-salamander.elf

EBOOT_PATH		= ps3/pkg/USRDIR/EBOOT.BIN
CORE_PATH		= ps3/pkg/USRDIR/cores/CORE.SELF

LDDIRS = -L. -L$(CELL_SDK)/target/ppu/lib/PSGL/RSX/ultra-opt
INCDIRS = -I. -Ips3 -Icommon

PKG_SCRIPT		= ps3/ps3py/pkg.py
ifeq ($(shell uname), Linux)
PKG_FINALIZE         	= package_finalize
MAKE_SELF_WC		= make_self_wc
MAKE_SELF		= make_self_npdrm
PYTHON2			= python2
GIT			= git
else
PKG_FINALIZE         	= package_finalize.exe
MAKE_SELF_WC		= make_self_wc.exe
MAKE_SELF		= make_self_npdrm.exe
PYTHON2			= python2.exe
GIT			= git.exe
endif

PPU_SRCS		= console/griffin/griffin.c \
			console/szlib/szlib.c

ifeq ($(HAVE_RARCH_GL), 1)
DEFINES			= -DHAVE_RARCH_GL
GL_LIBS			:= -lRARCHGL -lRARCHGLcgc
else
GL_LIBS			:= -L$(CELL_SDK)/target/ppu/lib/PSGL/RSX/ultra-opt -lPSGL -lPSGLcgc
endif

ifeq ($(CELL_BUILD_TOOLS), SNC)
	PPU_CXXLD = $(CELL_SDK)/host-win32/sn/bin/ps3ppuld.exe
	PPU_CXX	= $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
	PPU_CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
else
	PPU_CXX	= $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
	PPU_CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
	PPU_CXXLD = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ld.exe
endif


PPU_LDLIBS = -ldbgfont $(GL_LIBS) -lretro -lcgc -lgcm_cmd -lgcm_sys_stub -lresc_stub -lm -lio_stub -lfs_stub -lsysutil_stub -lsysutil_game_stub -lsysutil_screenshot_stub -lsysutil_np_stub -lpngdec_stub -ljpgdec_stub -lsysmodule_stub -laudio_stub -lnet_stub -lnetctl_stub -lpthread

DEFINES += -DRARCH_CONSOLE -DHAVE_OPENGL -DHAVE_CG -DHAVE_FBO -DHAVE_RARCH_MAIN_WRAP -DHAVE_RARCH_EXEC -DHAVE_LIBRETRO_MANAGEMENT -DHAVE_RSOUND -DHAVE_ZLIB -D__CELLOS_LV2__ -DHAVE_CONFIGFILE=1 -DHAVE_NETPLAY=1 -DHAVE_SOCKET_LEGACY=1 -DHAVE_GRIFFIN=1 -DPACKAGE_VERSION=\"$(RARCH_VERSION)\" -Dmain=rarch_main -DPC_DEVELOPMENT_IP_ADDRESS=\"$(PC_DEVELOPMENT_IP_ADDRESS)\" -DPC_DEVELOPMENT_UDP_PORT=$(PC_DEVELOPMENT_UDP_PORT)

ifeq ($(DEBUG), 1)
   PPU_OPTIMIZE_LV	:= -O0 -g
else
   PPU_OPTIMIZE_LV	:= -O3 -g
endif

PPU_CFLAGS = $(PPU_OPTIMIZE_LV) $(INCDIRS) $(DEFINES)
PPU_CXXFLAGS = $(PPU_OPTIMIZE_LV) $(INCDIRS) $(DEFINES)

ifeq ($(HAVE_LOGGER), 1)
PPU_CFLAGS		+= -DHAVE_LOGGER
PPU_SRCS		+= console/logger/logger.c
endif

EXIST_EBOOT_WILDCARD := $(wildcard $(EBOOT_PATH))
EXIST_CORE_WILDCARD := $(wildcard $(CORE_PATH))

EBOOT_EXISTS		= 1
CORE_EXISTS		= 1

ifneq ($(strip $(EXIST_EBOOT_WILDCARD)),)
EBOOT_EXISTS		= 0
endif

ifneq ($(strip $(EXIST_CORE_WILDCARD)),)
CORE_EXISTS		= 0
endif

include $(CELL_MK_DIR)/sdk.target.mk

MAKE_FSELF = $(CELL_SDK)/host-win32/bin/make_fself.exe
MAKE_FSELF_NPDRM = $(CELL_SDK)/host-win32/bin/make_fself_npdrm.exe
MAKE_PACKAGE_NPDRM = $(CELL_SDK)/host-win32/bin/make_package_npdrm.exe

.PHONY: create-selfs-npdrm create-npdrm-core create-core create-npdrm-salamander create-npdrm-salamander create-shaders clean-selfs

create-npdrm-core:
	$(MAKE_FSELF_NPDRM) $(PPU_TARGET) $(CORE_PATH)

create-core:
	$(MAKE_SELF_WC) $(PPU_TARGET) $(CORE_PATH)

create-npdrm-salamander:
	$(MAKE_FSELF_NPDRM) $(SALAMANDER_TARGET) $(EBOOT_PATH)
	
create-salamander:
	$(MAKE_SELF) $(SALAMANDER_TARGET) $(EBOOT_PATH) $(CONTENT_ID_FULL)


create-shaders:
ifeq ($(DOWNLOAD_SHADERS),1)
	$(RM) -rf ps3/pkg/USRDIR/cores/shaders
	$(GIT) clone git://github.com/twinaphex/common-shaders.git ps3/pkg/USRDIR/cores/shaders
endif

pkg: $(PPU_TARGET) create-shaders create-npdrm-salamander create-npdrm-core
	$(MAKE_PACKAGE_NPDRM) ps3/pkg/package.conf ps3/pkg

pkg-signed: $(PPU_TARGET) create-shaders create-salamander create-core
	$(PYTHON2) $(PKG_SCRIPT) --contentid $(CONTENT_ID_FULL) ps3/pkg/ retroarch-ps3-cfw-$(RARCH_VERSION).pkg

pkg-signed-standalone: $(PPU_TARGET) create-shaders create-core
	$(MAKE_SELF) $(PPU_TARGET) $(EBOOT_PATH) $(CONTENT_ID)
	$(PYTHON2) $(PKG_SCRIPT) --contentid $(CONTENT_ID_FULL) ps3/pkg/ retroarch-ps3-cfw-$(RARCH_VERSION).pkg

pkg-signed-cfw: $(PPU_TARGET) create-shaders create-salamander create-core
	$(PYTHON2) $(PKG_SCRIPT) --contentid $(CONTENT_ID_FULL) ps3/pkg/ retroarch-ps3-cfw-$(RARCH_VERSION)-kmeaw.pkg
	$(PKG_FINALIZE) retroarch-ps3-cfw-$(RARCH_VERSION)-kmeaw.pkg

pkg-signed-cfw-standalone: $(PPU_TARGET) create-shaders create-core
	$(MAKE_SELF) $(PPU_TARGET) $(EBOOT_PATH) $(CONTENT_ID)
	$(PYTHON2) $(PKG_SCRIPT) --contentid $(CONTENT_ID_FULL) ps3/pkg/ retroarch-ps3-cfw-$(RARCH_VERSION).pkg
	$(PKG_FINALIZE) retroarch-ps3-cfw-$(RARCH_VERSION)-kmeaw.pkg

clean-selfs:
ifeq ($(EBOOT_EXISTS),1)
	@echo "WARNING: Couldn't find file to delete: [$(EBOOT_PATH)], skipping this step."
else
	rm $(EBOOT_PATH)
endif
ifeq ($(CORE_EXISTS),1)
	@echo "WARNING: Couldn't find file to delete: [$(CORE_PATH)], skipping this step."
else
	rm $(CORE_PATH)
endif
